# https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc
# spa (Spanish; Castilian)

from PIL import Image
import pytesseract
from translate import Translator
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from time import sleep
import sys

pytesseract.pytesseract.tesseract_cmd = 'C:/Program Files (x86)/Tesseract-OCR/tesseract'
translator = Translator(from_lang="es", to_lang="en")

# words = []
# defs = []

def getWords(infile):

    print("$$ Loading image...")

    try:
        img = Image.open(infile, mode='r')
    except Exception as e:
        print("ERROR: Failed to open image!")
    else:
        print("$$ Image loaded successfully")
        text = pytesseract.image_to_string(img, lang='spa')
        picWords = text.splitlines()

    words = []

    try:
        for word in picWords:
            if word != '':
                words.append(word)
    except Exception as e:
        print("ERROR: Failed to parse text!")

    return words


def translateWords(words):
    defs = []

    print("$$ Translating words...")

    try:
        for word in words:
            translation = translator.translate(word)
            defs.append(translation)
    except Exception as e:
        print("ERROR: Failed to translate words!")
    else:
        print("$$ Words translated successfully")

    return defs


def createQuizlet(email, password, title, terms, defintions):

    print("$$ Connecting to webdriver...")

    driver = webdriver.Chrome()
    driver.get("https://quizlet.com/login")
    assert "Quizlet" in driver.title
    print("$$ Successfully connected to webdriver")

    #   Log in
    print("$$ Logging into Quizlet")

    try:
        driver.find_element_by_css_selector(".UISocialButton.UISocialButton--default").click()
        sleep(1)
        elem = driver.find_element_by_name("identifier")
        elem.clear()
        elem.send_keys(email)
        elem.send_keys(Keys.RETURN)
        sleep(1)
        elem = driver.find_element_by_name("password")
        elem.clear()
        elem.send_keys(password)
        elem.send_keys(Keys.RETURN)
        sleep(1)
        driver.refresh()
        driver.find_element_by_xpath("""//*[@id="SiteHeaderReactTarget"]/header/div/div/span[2]/div/div[2]/a/div""").click()
    except Exception as e:
        print("ERROR: Failed to log into Quizlet!")
    else:
        print("$$ Logged into Quizlet")

    #   Create Quizlet
    print("$$ Creating set...")

    try:
        driver.find_element_by_xpath("""//*[@id="SetPageTarget"]/div/div[1]/div[2]/div/div/label/div/div/div[2]/textarea""").send_keys(title + Keys.TAB)
        driver.find_element_by_xpath("""//*[@id="SetPageTarget"]/div/div[2]/div[2]/div/div[1]/div[1]/div[1]/div/div[3]/div[1]/div/div/div[1]/div/div/label/span/div/button""").click()
        driver.find_element_by_xpath("""//*[@id="react-select-2--option-1"]""").click()
        driver.find_element_by_xpath("""//*[@id="SetPageTarget"]/div/div[2]/div[2]/div/div[1]/div[1]/div[1]/div/div[3]/div[1]/div/div/div[2]/div/div/label/span/div/button""").click()
        driver.find_element_by_xpath("""//*[@id="react-select-3--option-1"]""").click()

        #	Fill in the text
        element = driver.find_element_by_xpath("""//*[@id="SetPageTarget"]/div/div[2]/div[2]/div/div[1]/div[1]/div[1]/div/div[3]/div[1]/div/div/div[1]/div/div/label/div/div[1]/div[2]/textarea""")
        actions = webdriver.ActionChains (driver)
        actions.move_to_element(element)
        actions.click()	
        actions.send_keys("THIS SET WAS GENERATED BY A PYTHON BOT" + Keys.TAB)
        actions.send_keys("EXPECT ERRORS" + Keys.TAB)

        for i in range(0, len(terms)):	
            actions.send_keys(terms[i] + Keys.TAB)
            actions.send_keys(defintions[i] + Keys.TAB)
        actions.perform()
    except Exception as e:
        print("ERROR: Failed to create set!")
    else:
        print("$$ Successfully created set")

    #	Save
    print("$$ Saving set...")
    try:
        save = driver.find_element_by_css_selector(".UIButton.UIButton--hero").click
        # save.find_element_by_css_selector(".UIButton-wrapper").click()
    except Exception as e:
        print("ERROR: Failed to save set!")
        print(e)
    else:
        print("$$ Set saved")
        sleep(2)
        driver.close() 	


def main():
    email = input("Enter Quizlet email: ")
    password = input("Enter Quizlet password: ")
    infile = input("Enter path to image file: ")
    title = input("Enter title for the set: ")
    # Get words from image
    words = getWords(infile)
    # Tranlate words
    defs = translateWords(words)
    # Make Quizlet
    createQuizlet(email, password, title, words, defs)


if __name__=="__main__":
    try:
        print("$$ Press any key to quit")
        main()
    except KeyboardInterrupt as e:
        print("STOPPED...")